service: album-backend

custom:
    bucket_raw_videos: ${self:service}-${self:provider.stage}-raw-videos
    bucket_medias: ${self:service}-${self:provider.stage}-medias
    prefix: ${self:service}-${self:provider.region}-${self:provider.stage}

provider:
    name: aws
    region: eu-west-2
    runtime: provided.al2
    stage: ${opt:stage, 'dev'}
    environment:
        APP_ENV: prod
        ALBUM_STORAGE_REGION: ${file(../config.json):ALBUM_STORAGE_REGION}
        AWS_KEY: ${ssm:/album/${self:provider.stage}/api-key}
        AWS_SECRET: ${ssm:/album/${self:provider.stage}/api-secret}
        MEDIAS_BUCKET: ${self:custom.bucket_medias}
        MAILER_DSN: sendgrid://${ssm:/album/${self:provider.stage}/sendgrid-key}@default
        ADMIN_EMAIL: ${file(../config.json):ADMIN_EMAIL}
        APP_EMAIL: ${file(../config.json):APP_EMAIL}
        ALBUM_AUTH_SECRET: ${ssm:/album/${self:provider.stage}/auth-secret}
        PROXY_IMAGE: ${file(../config.json):IMG_PROXY}
        KEY_PAIR_ID: ${ssm:/album/${self:provider.stage}/key-pair-id}
        AWS_PK: ${ssm:/album/${self:provider.stage}/aws-pk}
        APP_URI: ${file(../config.json):APP_URI}
        FIREBASE_KEY: ${ssm:/album/${self:provider.stage}/firebase-key}
        FIREBASE_CHANNEL_SUFFIX: ${file(../config.json):FIREBASE_CHANNEL_SUFFIX}
        BUCKET_VIDEO_INPUT: ${self:custom.bucket_raw_videos}
        PROJECT_NAME: ${self:service}
        PROJECT_STAGE: ${self:provider.stage}
        TABLE_PREFIX: ${self:custom.prefix}
        CORS_ALLOW_ORIGIN: ${file(../config.json):CORS_ALLOW_ORIGIN}
        APP_NAME: ${file(../config.json):APP_NAME}
        ACCESS_KEY_ID_VIDEO_RAW_STORAGE: ${ssm:/album/${self:provider.stage}/access_key_id_video_raw_storage}
        SECRET_ACCESS_KEY_VIDEO_RAW_STORAGE: ${ssm:/album/${self:provider.stage}/secret_access_key_video_raw_storage}
        ACCESS_KEY_ID_MEDIA_STORAGE: ${ssm:/album/${self:provider.stage}/access_key_id_media_storage}
        SECRET_ACCESS_KEY_MEDIA_STORAGE: ${ssm:/album/${self:provider.stage}/secret_access_key_media_storage}
        CLOUD_CONVERT_API_KEY: ${ssm:/album/${self:provider.stage}/cloudconvert_apikey}
    iamRoleStatements:
        - Effect: Allow
          Action:
              - s3:*
          Resource: "*"
        - Effect: Allow
          Action:
              - logs:*
          Resource: '*'
        - Effect: Allow
          Action:
              - dynamodb:*
          Resource: '*'
    tags:
        project: ${self:service}-${self:provider.stage}

plugins:
    - ./vendor/bref/bref

functions:
    Api:
        handler: public/index.php
        description: ''
        timeout: 28
        layers:
            - ${bref:layer.php-80-fpm}
        events:
            -   http: 'ANY /'
            -   http: 'ANY /{proxy+}'
            -   httpApi: '*'

    MediaIngest:
        handler: src/Lambda/LambdaApplication.php
        description: 'Handle image upload on S3'
        timeout: 10
        memorySize: 1024
        layers:
            - ${bref:layer.php-80}
        events:
            - s3:
                  bucket: medias
                  event: s3:ObjectCreated:*

    VideoIngest:
        handler: src/Lambda/LambdaApplication.php
        description: 'Handle video uploaded on S3'
        timeout: 900
        memorySize: 3008
        layers:
            - ${bref:layer.php-80}
        events:
            - s3:
                  bucket: videos
                  event: s3:ObjectCreated:*

resources:
    Resources:
        S3BucketMedias:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:custom.bucket_medias}
                PublicAccessBlockConfiguration:
                    BlockPublicAcls: true
                    BlockPublicPolicy: true
                    IgnorePublicAcls: true
                    RestrictPublicBuckets: true
                CorsConfiguration:
                    CorsRules:
                        -
                            AllowedHeaders:
                                - '*'
                            AllowedMethods:
                                - 'PUT'
                                - 'GET'
                            AllowedOrigins:
                                - '*'
                            MaxAge: 3000
        MediaIngestLambdaPermissionMediasS3:
            Type: AWS::Lambda::Permission
            Properties:
                FunctionName:
                    'Fn::GetAtt':
                        - MediaIngestLambdaFunction
                        - Arn
                Principal: 's3.amazonaws.com'
                Action: 'lambda:InvokeFunction'
                SourceAccount:
                    Ref: AWS::AccountId
                SourceArn: 'arn:aws:s3:::${self:custom.bucket_medias}'
        S3BucketVideos:
            Type: AWS::S3::Bucket
            Properties:
                BucketName: ${self:custom.bucket_raw_videos}
                PublicAccessBlockConfiguration:
                    BlockPublicAcls: true
                    BlockPublicPolicy: true
                    IgnorePublicAcls: true
                    RestrictPublicBuckets: true
                CorsConfiguration:
                    CorsRules:
                        - AllowedHeaders:
                              - '*'
                          AllowedMethods:
                              - 'PUT'
                              - 'GET'
                          AllowedOrigins:
                              - '*'
                          MaxAge: 3000
        VideoIngestLambdaPermissionVideosS3:
            Type: AWS::Lambda::Permission
            Properties:
                FunctionName:
                    'Fn::GetAtt':
                        - VideoIngestLambdaFunction
                        - Arn
                Principal: 's3.amazonaws.com'
                Action: 'lambda:InvokeFunction'
                SourceAccount:
                    Ref: AWS::AccountId
                SourceArn: 'arn:aws:s3:::${self:custom.bucket_raw_videos}'

        UserTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.prefix}-user
                AttributeDefinitions:
                    - AttributeName: email
                      AttributeType: S
                KeySchema:
                    - AttributeName: email
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST

        MediaTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.prefix}-media
                AttributeDefinitions:
                    - AttributeName: mediaKey
                      AttributeType: S
                    - AttributeName: folder
                      AttributeType: S
                KeySchema:
                    - AttributeName: mediaKey
                      KeyType: HASH
                GlobalSecondaryIndexes:
                    - IndexName: folderIndex
                      KeySchema:
                          - AttributeName: folder
                            KeyType: HASH
                      Projection:
                          ProjectionType: ALL
                BillingMode: PAY_PER_REQUEST

        AlbumTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.prefix}-album
                AttributeDefinitions:
                    - AttributeName: slug
                      AttributeType: S
                KeySchema:
                    - AttributeName: slug
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST

# Exclude files from deployment
package:
    exclude:
        - 'node_modules/**'
        - 'tests/**'
