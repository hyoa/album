// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	media "github.com/hyoa/album/api/internal/media"
	mock "github.com/stretchr/testify/mock"
)

// MediaRepository is an autogenerated mock type for the MediaRepository type
type MediaRepository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields:
func (_m *MediaRepository) FindAll() ([]media.Media, error) {
	ret := _m.Called()

	var r0 []media.Media
	if rf, ok := ret.Get(0).(func() []media.Media); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]media.Media)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByFolder provides a mock function with given fields: folder
func (_m *MediaRepository) FindByFolder(folder string) ([]media.Media, error) {
	ret := _m.Called(folder)

	var r0 []media.Media
	if rf, ok := ret.Get(0).(func(string) []media.Media); ok {
		r0 = rf(folder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]media.Media)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(folder)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByKey provides a mock function with given fields: key
func (_m *MediaRepository) FindByKey(key string) (media.Media, error) {
	ret := _m.Called(key)

	var r0 media.Media
	if rf, ok := ret.Get(0).(func(string) media.Media); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(media.Media)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindFoldersName provides a mock function with given fields: name
func (_m *MediaRepository) FindFoldersName(name string) ([]string, error) {
	ret := _m.Called(name)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindManyByKeys provides a mock function with given fields: keys
func (_m *MediaRepository) FindManyByKeys(keys []string) ([]media.Media, error) {
	ret := _m.Called(keys)

	var r0 []media.Media
	if rf, ok := ret.Get(0).(func([]string) []media.Media); ok {
		r0 = rf(keys)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]media.Media)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(keys)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: _a0
func (_m *MediaRepository) Save(_a0 media.Media) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(media.Media) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMediaRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMediaRepository creates a new instance of MediaRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMediaRepository(t mockConstructorTestingTNewMediaRepository) *MediaRepository {
	mock := &MediaRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
