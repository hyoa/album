// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	album "github.com/hyoa/album/api/internal/album"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: a
func (_m *Repository) Delete(a album.Album) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(album.Album) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *Repository) FindAll() ([]album.Album, error) {
	ret := _m.Called()

	var r0 []album.Album
	if rf, ok := ret.Get(0).(func() []album.Album); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]album.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindBySlug provides a mock function with given fields: slug
func (_m *Repository) FindBySlug(slug string) (album.Album, error) {
	ret := _m.Called(slug)

	var r0 album.Album
	if rf, ok := ret.Get(0).(func(string) album.Album); ok {
		r0 = rf(slug)
	} else {
		r0 = ret.Get(0).(album.Album)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: a
func (_m *Repository) Save(a album.Album) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(album.Album) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Search provides a mock function with given fields: search, private, noMedia, limit, offset
func (_m *Repository) Search(search string, private bool, noMedia bool, limit int, offset int) ([]album.Album, error) {
	ret := _m.Called(search, private, noMedia, limit, offset)

	var r0 []album.Album
	if rf, ok := ret.Get(0).(func(string, bool, bool, int, int) []album.Album); ok {
		r0 = rf(search, private, noMedia, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]album.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool, bool, int, int) error); ok {
		r1 = rf(search, private, noMedia, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: a
func (_m *Repository) Update(a album.Album) error {
	ret := _m.Called(a)

	var r0 error
	if rf, ok := ret.Get(0).(func(album.Album) error); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
