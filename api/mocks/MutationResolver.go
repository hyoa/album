// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/hyoa/album/api/graph/model"
)

// MutationResolver is an autogenerated mock type for the MutationResolver type
type MutationResolver struct {
	mock.Mock
}

// AskResetPassword provides a mock function with given fields: ctx, input
func (_m *MutationResolver) AskResetPassword(ctx context.Context, input model.AskResetPasswordInput) (*model.User, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, model.AskResetPasswordInput) *model.User); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.AskResetPasswordInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeFolderName provides a mock function with given fields: ctx, input
func (_m *MutationResolver) ChangeFolderName(ctx context.Context, input *model.ChangeFolderNameInput) (*model.Folder, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.Folder
	if rf, ok := ret.Get(0).(func(context.Context, *model.ChangeFolderNameInput) *model.Folder); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Folder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.ChangeFolderNameInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeMediasFolder provides a mock function with given fields: ctx, input
func (_m *MutationResolver) ChangeMediasFolder(ctx context.Context, input *model.ChangeMediasFolderInput) (*model.Folder, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.Folder
	if rf, ok := ret.Get(0).(func(context.Context, *model.ChangeMediasFolderInput) *model.Folder); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Folder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.ChangeMediasFolderInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAlbum provides a mock function with given fields: ctx, input
func (_m *MutationResolver) CreateAlbum(ctx context.Context, input model.CreateAlbumInput) (*model.Album, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.Album
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateAlbumInput) *model.Album); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.CreateAlbumInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, input
func (_m *MutationResolver) CreateUser(ctx context.Context, input model.CreateInput) (*model.User, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateInput) *model.User); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.CreateInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAlbum provides a mock function with given fields: ctx, input
func (_m *MutationResolver) DeleteAlbum(ctx context.Context, input model.DeleteAlbumInput) (*model.ActionResult, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.ActionResult
	if rf, ok := ret.Get(0).(func(context.Context, model.DeleteAlbumInput) *model.ActionResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ActionResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.DeleteAlbumInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ingest provides a mock function with given fields: ctx, input
func (_m *MutationResolver) Ingest(ctx context.Context, input model.PutIngestInput) ([]*model.PutIngestMediaOutput, error) {
	ret := _m.Called(ctx, input)

	var r0 []*model.PutIngestMediaOutput
	if rf, ok := ret.Get(0).(func(context.Context, model.PutIngestInput) []*model.PutIngestMediaOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PutIngestMediaOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.PutIngestInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Invite provides a mock function with given fields: ctx, input
func (_m *MutationResolver) Invite(ctx context.Context, input *model.InviteInput) (*model.Invitation, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.Invitation
	if rf, ok := ret.Get(0).(func(context.Context, *model.InviteInput) *model.Invitation); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Invitation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.InviteInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: ctx, input
func (_m *MutationResolver) ResetPassword(ctx context.Context, input *model.ResetPasswordInput) (*model.User, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, *model.ResetPasswordInput) *model.User); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.ResetPasswordInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAlbum provides a mock function with given fields: ctx, input
func (_m *MutationResolver) UpdateAlbum(ctx context.Context, input model.UpdateAlbumInput) (*model.Album, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.Album
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdateAlbumInput) *model.Album); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UpdateAlbumInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAlbumFavorite provides a mock function with given fields: ctx, input
func (_m *MutationResolver) UpdateAlbumFavorite(ctx context.Context, input model.UpdateAlbumFavoriteInput) (*model.Album, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.Album
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdateAlbumFavoriteInput) *model.Album); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UpdateAlbumFavoriteInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAlbumMedias provides a mock function with given fields: ctx, input
func (_m *MutationResolver) UpdateAlbumMedias(ctx context.Context, input model.UpdateAlbumMediasInput) (*model.Album, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.Album
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdateAlbumMediasInput) *model.Album); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UpdateAlbumMediasInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, input
func (_m *MutationResolver) UpdateUser(ctx context.Context, input model.UpdateInput) (*model.User, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, model.UpdateInput) *model.User); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.UpdateInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMutationResolver interface {
	mock.TestingT
	Cleanup(func())
}

// NewMutationResolver creates a new instance of MutationResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMutationResolver(t mockConstructorTestingTNewMutationResolver) *MutationResolver {
	mock := &MutationResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
