// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/hyoa/album/api/graph/model"
)

// QueryResolver is an autogenerated mock type for the QueryResolver type
type QueryResolver struct {
	mock.Mock
}

// Album provides a mock function with given fields: ctx, input
func (_m *QueryResolver) Album(ctx context.Context, input model.GetAlbumInput) (*model.Album, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.Album
	if rf, ok := ret.Get(0).(func(context.Context, model.GetAlbumInput) *model.Album); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.GetAlbumInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Albums provides a mock function with given fields: ctx, input
func (_m *QueryResolver) Albums(ctx context.Context, input model.GetAlbumsInput) ([]*model.Album, error) {
	ret := _m.Called(ctx, input)

	var r0 []*model.Album
	if rf, ok := ret.Get(0).(func(context.Context, model.GetAlbumsInput) []*model.Album); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Album)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.GetAlbumsInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Auth provides a mock function with given fields: ctx, input
func (_m *QueryResolver) Auth(ctx context.Context, input *model.AuthInput) (*model.Auth, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.Auth
	if rf, ok := ret.Get(0).(func(context.Context, *model.AuthInput) *model.Auth); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Auth)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.AuthInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Folder provides a mock function with given fields: ctx, input
func (_m *QueryResolver) Folder(ctx context.Context, input model.GetFolderInput) (*model.Folder, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.Folder
	if rf, ok := ret.Get(0).(func(context.Context, model.GetFolderInput) *model.Folder); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Folder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.GetFolderInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Folders provides a mock function with given fields: ctx, input
func (_m *QueryResolver) Folders(ctx context.Context, input model.GetFoldersInput) ([]*model.Folder, error) {
	ret := _m.Called(ctx, input)

	var r0 []*model.Folder
	if rf, ok := ret.Get(0).(func(context.Context, model.GetFoldersInput) []*model.Folder); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Folder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.GetFoldersInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ingest provides a mock function with given fields: ctx, input
func (_m *QueryResolver) Ingest(ctx context.Context, input model.GetIngestInput) ([]*model.GetIngestMediaOutput, error) {
	ret := _m.Called(ctx, input)

	var r0 []*model.GetIngestMediaOutput
	if rf, ok := ret.Get(0).(func(context.Context, model.GetIngestInput) []*model.GetIngestMediaOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GetIngestMediaOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.GetIngestInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User provides a mock function with given fields: ctx, input
func (_m *QueryResolver) User(ctx context.Context, input model.GetUserInput) (*model.User, error) {
	ret := _m.Called(ctx, input)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context, model.GetUserInput) *model.User); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.GetUserInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Users provides a mock function with given fields: ctx
func (_m *QueryResolver) Users(ctx context.Context) ([]*model.User, error) {
	ret := _m.Called(ctx)

	var r0 []*model.User
	if rf, ok := ret.Get(0).(func(context.Context) []*model.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewQueryResolver interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueryResolver creates a new instance of QueryResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueryResolver(t mockConstructorTestingTNewQueryResolver) *QueryResolver {
	mock := &QueryResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
